//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  /// This `R.image` struct is generated, and contains static references to 71 images.
  struct image {
    /// Image `icon_arrow_right_gray`.
    static let icon_arrow_right_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_arrow_right_gray")
    /// Image `icon_arrow_right`.
    static let icon_arrow_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_arrow_right")
    /// Image `icon_emptyNetwork_placeholder`.
    static let icon_emptyNetwork_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_emptyNetwork_placeholder")
    /// Image `icon_empty_bookshelf_placeholder`.
    static let icon_empty_bookshelf_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_empty_bookshelf_placeholder")
    /// Image `icon_empty_placeholder`.
    static let icon_empty_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_empty_placeholder")
    /// Image `icon_gallery_collection_normal`.
    static let icon_gallery_collection_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_gallery_collection_normal")
    /// Image `icon_gallery_collection_seleted`.
    static let icon_gallery_collection_seleted = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_gallery_collection_seleted")
    /// Image `icon_gallery_merchant_close`.
    static let icon_gallery_merchant_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_gallery_merchant_close")
    /// Image `icon_gallery_videoTag`.
    static let icon_gallery_videoTag = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_gallery_videoTag")
    /// Image `icon_gallery_video_comment`.
    static let icon_gallery_video_comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_gallery_video_comment")
    /// Image `icon_gallery_video_like`.
    static let icon_gallery_video_like = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_gallery_video_like")
    /// Image `icon_gallery_video_liked`.
    static let icon_gallery_video_liked = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_gallery_video_liked")
    /// Image `icon_gallery_video_share`.
    static let icon_gallery_video_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_gallery_video_share")
    /// Image `icon_hud_error`.
    static let icon_hud_error = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_hud_error")
    /// Image `icon_hud_success`.
    static let icon_hud_success = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_hud_success")
    /// Image `icon_hud_warning`.
    static let icon_hud_warning = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_hud_warning")
    /// Image `icon_mj_refresh_pull_10_40x50_`.
    static let icon_mj_refresh_pull_10_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_10_40x50_")
    /// Image `icon_mj_refresh_pull_11_40x50_`.
    static let icon_mj_refresh_pull_11_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_11_40x50_")
    /// Image `icon_mj_refresh_pull_12_40x50_`.
    static let icon_mj_refresh_pull_12_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_12_40x50_")
    /// Image `icon_mj_refresh_pull_13_40x50_`.
    static let icon_mj_refresh_pull_13_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_13_40x50_")
    /// Image `icon_mj_refresh_pull_14_40x50_`.
    static let icon_mj_refresh_pull_14_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_14_40x50_")
    /// Image `icon_mj_refresh_pull_15_40x50_`.
    static let icon_mj_refresh_pull_15_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_15_40x50_")
    /// Image `icon_mj_refresh_pull_16_40x50_`.
    static let icon_mj_refresh_pull_16_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_16_40x50_")
    /// Image `icon_mj_refresh_pull_17_40x50_`.
    static let icon_mj_refresh_pull_17_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_17_40x50_")
    /// Image `icon_mj_refresh_pull_18_40x50_`.
    static let icon_mj_refresh_pull_18_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_18_40x50_")
    /// Image `icon_mj_refresh_pull_19_40x50_`.
    static let icon_mj_refresh_pull_19_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_19_40x50_")
    /// Image `icon_mj_refresh_pull_1_40x50_`.
    static let icon_mj_refresh_pull_1_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_1_40x50_")
    /// Image `icon_mj_refresh_pull_20_40x50_`.
    static let icon_mj_refresh_pull_20_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_20_40x50_")
    /// Image `icon_mj_refresh_pull_21_40x50_`.
    static let icon_mj_refresh_pull_21_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_21_40x50_")
    /// Image `icon_mj_refresh_pull_22_40x50_`.
    static let icon_mj_refresh_pull_22_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_22_40x50_")
    /// Image `icon_mj_refresh_pull_23_40x50_`.
    static let icon_mj_refresh_pull_23_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_23_40x50_")
    /// Image `icon_mj_refresh_pull_24_40x50_`.
    static let icon_mj_refresh_pull_24_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_24_40x50_")
    /// Image `icon_mj_refresh_pull_25_40x50_`.
    static let icon_mj_refresh_pull_25_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_25_40x50_")
    /// Image `icon_mj_refresh_pull_26_40x50_`.
    static let icon_mj_refresh_pull_26_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_26_40x50_")
    /// Image `icon_mj_refresh_pull_27_40x50_`.
    static let icon_mj_refresh_pull_27_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_27_40x50_")
    /// Image `icon_mj_refresh_pull_28_40x50_`.
    static let icon_mj_refresh_pull_28_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_28_40x50_")
    /// Image `icon_mj_refresh_pull_29_40x50_`.
    static let icon_mj_refresh_pull_29_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_29_40x50_")
    /// Image `icon_mj_refresh_pull_2_40x50_`.
    static let icon_mj_refresh_pull_2_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_2_40x50_")
    /// Image `icon_mj_refresh_pull_30_40x50_`.
    static let icon_mj_refresh_pull_30_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_30_40x50_")
    /// Image `icon_mj_refresh_pull_3_40x50_`.
    static let icon_mj_refresh_pull_3_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_3_40x50_")
    /// Image `icon_mj_refresh_pull_4_40x50_`.
    static let icon_mj_refresh_pull_4_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_4_40x50_")
    /// Image `icon_mj_refresh_pull_5_40x50_`.
    static let icon_mj_refresh_pull_5_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_5_40x50_")
    /// Image `icon_mj_refresh_pull_6_40x50_`.
    static let icon_mj_refresh_pull_6_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_6_40x50_")
    /// Image `icon_mj_refresh_pull_7_40x50_`.
    static let icon_mj_refresh_pull_7_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_7_40x50_")
    /// Image `icon_mj_refresh_pull_8_40x50_`.
    static let icon_mj_refresh_pull_8_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_8_40x50_")
    /// Image `icon_mj_refresh_pull_9_40x50_`.
    static let icon_mj_refresh_pull_9_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pull_9_40x50_")
    /// Image `icon_mj_refresh_pulling_40x50_`.
    static let icon_mj_refresh_pulling_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_pulling_40x50_")
    /// Image `icon_mj_refresh_refreshing_1_40x50_`.
    static let icon_mj_refresh_refreshing_1_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_refreshing_1_40x50_")
    /// Image `icon_mj_refresh_refreshing_2_40x50_`.
    static let icon_mj_refresh_refreshing_2_40x50_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mj_refresh_refreshing_2_40x50_")
    /// Image `icon_navigation_back_black`.
    static let icon_navigation_back_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_navigation_back_black")
    /// Image `icon_navigation_search`.
    static let icon_navigation_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_navigation_search")
    /// Image `icon_networkError_placeholder`.
    static let icon_networkError_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_networkError_placeholder")
    /// Image `icon_play_pause`.
    static let icon_play_pause = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_play_pause")
    /// Image `icon_shelf_check`.
    static let icon_shelf_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_shelf_check")
    /// Image `icon_shelf_local`.
    static let icon_shelf_local = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_shelf_local")
    /// Image `icon_shelf_placeholder`.
    static let icon_shelf_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_shelf_placeholder")
    /// Image `icon_shelf_search`.
    static let icon_shelf_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_shelf_search")
    /// Image `icon_shelf_uncheck`.
    static let icon_shelf_uncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_shelf_uncheck")
    /// Image `icon_shelf_updata`.
    static let icon_shelf_updata = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_shelf_updata")
    /// Image `icon_shelf_wifi`.
    static let icon_shelf_wifi = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_shelf_wifi")
    /// Image `icon_video_loading_cover`.
    static let icon_video_loading_cover = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_video_loading_cover")
    /// Image `tabbar_buy_norm_26x26_`.
    static let tabbar_buy_norm_26x26_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_buy_norm_26x26_")
    /// Image `tabbar_buy_seleted_26x26_`.
    static let tabbar_buy_seleted_26x26_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_buy_seleted_26x26_")
    /// Image `tabbar_community_norm_26x26_`.
    static let tabbar_community_norm_26x26_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_community_norm_26x26_")
    /// Image `tabbar_community_seleted_26x26_`.
    static let tabbar_community_seleted_26x26_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_community_seleted_26x26_")
    /// Image `tabbar_home_norm_26x26_`.
    static let tabbar_home_norm_26x26_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_home_norm_26x26_")
    /// Image `tabbar_home_seleted_26x26_`.
    static let tabbar_home_seleted_26x26_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_home_seleted_26x26_")
    /// Image `tabbar_user_norm_26x26_`.
    static let tabbar_user_norm_26x26_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_user_norm_26x26_")
    /// Image `tabbar_user_seleted_26x26_`.
    static let tabbar_user_seleted_26x26_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_user_seleted_26x26_")
    /// Image `tabbar_video_norm_26x26_`.
    static let tabbar_video_norm_26x26_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_video_norm_26x26_")
    /// Image `tabbar_video_seleted_26x26_`.
    static let tabbar_video_seleted_26x26_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_video_seleted_26x26_")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_arrow_right", bundle: ..., traitCollection: ...)`
    static func icon_arrow_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_arrow_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_arrow_right_gray", bundle: ..., traitCollection: ...)`
    static func icon_arrow_right_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_arrow_right_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_emptyNetwork_placeholder", bundle: ..., traitCollection: ...)`
    static func icon_emptyNetwork_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_emptyNetwork_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_empty_bookshelf_placeholder", bundle: ..., traitCollection: ...)`
    static func icon_empty_bookshelf_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_empty_bookshelf_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_empty_placeholder", bundle: ..., traitCollection: ...)`
    static func icon_empty_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_empty_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_gallery_collection_normal", bundle: ..., traitCollection: ...)`
    static func icon_gallery_collection_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_gallery_collection_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_gallery_collection_seleted", bundle: ..., traitCollection: ...)`
    static func icon_gallery_collection_seleted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_gallery_collection_seleted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_gallery_merchant_close", bundle: ..., traitCollection: ...)`
    static func icon_gallery_merchant_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_gallery_merchant_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_gallery_videoTag", bundle: ..., traitCollection: ...)`
    static func icon_gallery_videoTag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_gallery_videoTag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_gallery_video_comment", bundle: ..., traitCollection: ...)`
    static func icon_gallery_video_comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_gallery_video_comment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_gallery_video_like", bundle: ..., traitCollection: ...)`
    static func icon_gallery_video_like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_gallery_video_like, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_gallery_video_liked", bundle: ..., traitCollection: ...)`
    static func icon_gallery_video_liked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_gallery_video_liked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_gallery_video_share", bundle: ..., traitCollection: ...)`
    static func icon_gallery_video_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_gallery_video_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_hud_error", bundle: ..., traitCollection: ...)`
    static func icon_hud_error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_hud_error, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_hud_success", bundle: ..., traitCollection: ...)`
    static func icon_hud_success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_hud_success, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_hud_warning", bundle: ..., traitCollection: ...)`
    static func icon_hud_warning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_hud_warning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_10_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_10_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_10_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_11_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_11_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_11_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_12_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_12_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_12_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_13_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_13_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_13_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_14_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_14_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_14_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_15_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_15_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_15_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_16_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_16_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_16_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_17_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_17_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_17_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_18_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_18_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_18_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_19_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_19_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_19_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_1_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_1_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_1_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_20_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_20_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_20_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_21_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_21_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_21_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_22_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_22_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_22_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_23_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_23_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_23_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_24_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_24_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_24_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_25_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_25_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_25_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_26_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_26_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_26_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_27_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_27_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_27_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_28_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_28_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_28_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_29_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_29_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_29_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_2_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_2_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_2_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_30_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_30_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_30_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_3_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_3_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_3_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_4_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_4_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_4_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_5_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_5_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_5_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_6_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_6_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_6_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_7_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_7_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_7_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_8_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_8_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_8_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pull_9_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pull_9_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pull_9_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_pulling_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_pulling_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_pulling_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_refreshing_1_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_refreshing_1_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_refreshing_1_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mj_refresh_refreshing_2_40x50_", bundle: ..., traitCollection: ...)`
    static func icon_mj_refresh_refreshing_2_40x50_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mj_refresh_refreshing_2_40x50_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_navigation_back_black", bundle: ..., traitCollection: ...)`
    static func icon_navigation_back_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_navigation_back_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_navigation_search", bundle: ..., traitCollection: ...)`
    static func icon_navigation_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_navigation_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_networkError_placeholder", bundle: ..., traitCollection: ...)`
    static func icon_networkError_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_networkError_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_play_pause", bundle: ..., traitCollection: ...)`
    static func icon_play_pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_play_pause, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_shelf_check", bundle: ..., traitCollection: ...)`
    static func icon_shelf_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_shelf_check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_shelf_local", bundle: ..., traitCollection: ...)`
    static func icon_shelf_local(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_shelf_local, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_shelf_placeholder", bundle: ..., traitCollection: ...)`
    static func icon_shelf_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_shelf_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_shelf_search", bundle: ..., traitCollection: ...)`
    static func icon_shelf_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_shelf_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_shelf_uncheck", bundle: ..., traitCollection: ...)`
    static func icon_shelf_uncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_shelf_uncheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_shelf_updata", bundle: ..., traitCollection: ...)`
    static func icon_shelf_updata(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_shelf_updata, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_shelf_wifi", bundle: ..., traitCollection: ...)`
    static func icon_shelf_wifi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_shelf_wifi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_video_loading_cover", bundle: ..., traitCollection: ...)`
    static func icon_video_loading_cover(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_video_loading_cover, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_buy_norm_26x26_", bundle: ..., traitCollection: ...)`
    static func tabbar_buy_norm_26x26_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_buy_norm_26x26_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_buy_seleted_26x26_", bundle: ..., traitCollection: ...)`
    static func tabbar_buy_seleted_26x26_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_buy_seleted_26x26_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_community_norm_26x26_", bundle: ..., traitCollection: ...)`
    static func tabbar_community_norm_26x26_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_community_norm_26x26_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_community_seleted_26x26_", bundle: ..., traitCollection: ...)`
    static func tabbar_community_seleted_26x26_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_community_seleted_26x26_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_home_norm_26x26_", bundle: ..., traitCollection: ...)`
    static func tabbar_home_norm_26x26_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_home_norm_26x26_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_home_seleted_26x26_", bundle: ..., traitCollection: ...)`
    static func tabbar_home_seleted_26x26_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_home_seleted_26x26_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_user_norm_26x26_", bundle: ..., traitCollection: ...)`
    static func tabbar_user_norm_26x26_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_user_norm_26x26_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_user_seleted_26x26_", bundle: ..., traitCollection: ...)`
    static func tabbar_user_seleted_26x26_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_user_seleted_26x26_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_video_norm_26x26_", bundle: ..., traitCollection: ...)`
    static func tabbar_video_norm_26x26_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_video_norm_26x26_, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_video_seleted_26x26_", bundle: ..., traitCollection: ...)`
    static func tabbar_video_seleted_26x26_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_video_seleted_26x26_, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 11 localization keys.
    struct localizable {
      /// en translation: Please check your network
      ///
      /// Locales: en, zh-Hans
      static let empty_networkDescribe = Rswift.StringResource(key: "empty_networkDescribe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: bookShelf
      ///
      /// Locales: en, zh-Hans
      static let tab_bookShelf = Rswift.StringResource(key: "tab_bookShelf", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: data is empty
      ///
      /// Locales: en, zh-Hans
      static let empty_title = Rswift.StringResource(key: "empty_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: go and fill the shelves with good books!
      ///
      /// Locales: en, zh-Hans
      static let empty_bookSelf_describe = Rswift.StringResource(key: "empty_bookSelf_describe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: home
      ///
      /// Locales: en, zh-Hans
      static let tab_home = Rswift.StringResource(key: "tab_home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: mine
      ///
      /// Locales: en, zh-Hans
      static let tab_mine = Rswift.StringResource(key: "tab_mine", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: please try again
      ///
      /// Locales: en, zh-Hans
      static let empty_describe = Rswift.StringResource(key: "empty_describe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: product
      ///
      /// Locales: en, zh-Hans
      static let tab_product = Rswift.StringResource(key: "tab_product", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: the shelves are empty
      ///
      /// Locales: en, zh-Hans
      static let empty_bookSelf_title = Rswift.StringResource(key: "empty_bookSelf_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: unable to connect to network
      ///
      /// Locales: en, zh-Hans
      static let empty_networkTitle = Rswift.StringResource(key: "empty_networkTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: video
      ///
      /// Locales: en, zh-Hans
      static let tab_video = Rswift.StringResource(key: "tab_video", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)

      /// en translation: Please check your network
      ///
      /// Locales: en, zh-Hans
      static func empty_networkDescribe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("empty_networkDescribe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "empty_networkDescribe"
        }

        return NSLocalizedString("empty_networkDescribe", bundle: bundle, comment: "")
      }

      /// en translation: bookShelf
      ///
      /// Locales: en, zh-Hans
      static func tab_bookShelf(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tab_bookShelf", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tab_bookShelf"
        }

        return NSLocalizedString("tab_bookShelf", bundle: bundle, comment: "")
      }

      /// en translation: data is empty
      ///
      /// Locales: en, zh-Hans
      static func empty_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("empty_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "empty_title"
        }

        return NSLocalizedString("empty_title", bundle: bundle, comment: "")
      }

      /// en translation: go and fill the shelves with good books!
      ///
      /// Locales: en, zh-Hans
      static func empty_bookSelf_describe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("empty_bookSelf_describe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "empty_bookSelf_describe"
        }

        return NSLocalizedString("empty_bookSelf_describe", bundle: bundle, comment: "")
      }

      /// en translation: home
      ///
      /// Locales: en, zh-Hans
      static func tab_home(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tab_home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tab_home"
        }

        return NSLocalizedString("tab_home", bundle: bundle, comment: "")
      }

      /// en translation: mine
      ///
      /// Locales: en, zh-Hans
      static func tab_mine(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tab_mine", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tab_mine"
        }

        return NSLocalizedString("tab_mine", bundle: bundle, comment: "")
      }

      /// en translation: please try again
      ///
      /// Locales: en, zh-Hans
      static func empty_describe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("empty_describe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "empty_describe"
        }

        return NSLocalizedString("empty_describe", bundle: bundle, comment: "")
      }

      /// en translation: product
      ///
      /// Locales: en, zh-Hans
      static func tab_product(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tab_product", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tab_product"
        }

        return NSLocalizedString("tab_product", bundle: bundle, comment: "")
      }

      /// en translation: the shelves are empty
      ///
      /// Locales: en, zh-Hans
      static func empty_bookSelf_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("empty_bookSelf_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "empty_bookSelf_title"
        }

        return NSLocalizedString("empty_bookSelf_title", bundle: bundle, comment: "")
      }

      /// en translation: unable to connect to network
      ///
      /// Locales: en, zh-Hans
      static func empty_networkTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("empty_networkTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "empty_networkTitle"
        }

        return NSLocalizedString("empty_networkTitle", bundle: bundle, comment: "")
      }

      /// en translation: video
      ///
      /// Locales: en, zh-Hans
      static func tab_video(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tab_video", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tab_video"
        }

        return NSLocalizedString("tab_video", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.main` struct is generated, and contains static references to 0 localization keys.
    struct main {
      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
